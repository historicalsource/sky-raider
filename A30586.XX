;	11-APR-78
;	16:30
	.TITLE	JBRV41: JET BOMBER REVISION 4.2
	.RADIX  16
	.NLIST	CND

.IIF NDF,R185,R185=0	;DEFAULT TO 0
.IIF NDF,R137,R137=0	;DEFAULT TO 0
.IIF NDF,R8316,R8316=0	;DEFAULT TO 0
	.PAGE
	.SBTTL PAGE ZERO ASSIGNMENTS
	.ASECT
COINC:	.BLKB	1			;CREDIT REGISTER
COINTL: .BLKB	1			;LEFT COIN
COINTR:	.BLKB	1			;RIGHT COIN
	.EVEN				;SCORES MUST BE ON EVEN ADDRESS
LNG1:	.BLKB	2
LNG2:	.BLKB	2
ZLOW:	.EVEN
SCORE:	.BLKB	2			;BCD SCORE
HISCOR:	.BLKB	2			;BCD HIGH SCORE
OFFY:	.BLKB	1			;POT X,Y OFFSETS
OFFX:	.BLKB	1
ZLO:
SYNC:	.BLKB	1			;INTERRUP AND GAME CONTROL
SIGHTC:	.BLKB	2			;GUNSIGHT CONTROL
MISCTL:	.BLKB	6			;CONTROL AND PIX WORD-MISSLE
TGTCTL:	.BLKB	8			;CONTROL AND PIX WORD-TARGET
SIGHTY:	.BLKB	2			;GUN SIGHT Y
MISY:	.BLKB	6			;MISSLE Y
TGTY:	.BLKB	8			;TARGET Y
SIGHTX:	.BLKB	2			;GUNSIGHT X
MISX:	.BLKB	6			;MISSLE X
TGTX:	.BLKB	8			;TARGET X
SLWREG:	.BLKB	2			;TERRAIN SLEW VALUE
VEL:	.BLKB	2			;VELOCITY
ABSVEL: .BLKB   2  			;ASBOLUTE VEL
SOUND:	.BLKB	1
FRMTME:	.BLKB	1			;CLOCK TICKS
BLINK:	.BLKB	1			;FRAME COUNT (BLINK)
FRMC:	.BLKB	2			;TOTAL FRAME COUNT (4 MINUTE)
SECNDS:	.BLKB	1			;BCD SECONDS REGISTER
MAPNDX: .BLKB	2			;OBJECT INDEX
POTY:	.BLKB	1			;SPEED CONTROL
POTX:	.BLKB	1			;HORIZ CONTROL
MSLTME: .BLKB   1			;TIME ELAPSED BETWEEN MISSLES
HSRTIM: .BLKB 1
	.EVEN				;(BONUS MUST BE ON EVEN BOUNDARY)
BNUS:	.BLKB	2			;BONUS SCORE
BNUS1:	.BLKB	1			;HI@SCORE => BONUS@FOR MESSAGE SWITCH
LOCK:	.BLKB	2
R0:	.BLKB	1			;WORKING-RAM
R1:	.BLKB	1
R2:	.BLKB	1
R3:	.BLKB	1
R4:	.BLKB	1
R5:	.BLKB	1
R6:	.BLKB	1
R7:	.BLKB	1
R8:	.BLKB	1
ZHI:
	.=7000			;BLANK LS 1K
	.REPT 512.
	.WORD 0
	.ENDR
	.=7400				;TOP OF ASECT (PROGRAM START)
;DBUG	=0				;DEFINE FOR DEBUG CYCLE
;PROMV	=0				;DEFINE FOR PROM VERSION
	
	.CSECT ONE
$CSTO:
	.CSECT FILL
	.CSECT MAIN
$CST:					;MARK START OF MAIN CSECT
	.CSECT TEST
$CTST:
	.ASECT
	.PAGE
	.SBTTL MACRO STUFF

	.MCALL .ALL,WTCHDG,ESYNC,DSYNC,SYBIT,CBIT,WAIT

	.ALL

	GENJSR	CLRZRO
	GENJSR	INTZRO
	GENJSR	ERASE
	GENJSR	TIME
	GENJSR	GTM
	GENJSR	CLROBJ
	GENJSR	NEG
	GENJSR	COIN
	GENJSR POTINP
	GENJSR CVTA
	GENJSR GCOINO

	.MACRO MSG OP
	LDY I,OP
	JSR PUTMSG
	.ENDM

	.MACRO MVI OP1,OP2
	LDA I,OP2&255.
	STA OP1
	LDA I,OP2&-256./256.
	STA OP1+1
	.ENDM
	.PAGE
	.SBTTL BIT DEFINITIONS

;
;CAN'T MOVE THE FOLLOWING 6 STATEMENTS
;
..C.=80
	CBIT ACT			;OBJECT ACTIVE BIT
	CBIT EXP			;OBJECT EXPLODING BIT
..CSI=80
	SYBIT ATR			;ATTRACT MODE
	SYBIT SYN			;SYNC PROCESS ENABLE

;END OF 'DO NOT MOVE'

	SYBIT EP			;EXTENDED PLAY IN PROCESS
	SYBIT SPR			;SYNC PROCESSED INDICATOR
	SYBIT DGN			;DIAGNOSTIC MODE
	CBIT SPC			;SPECIAL MOVING TARGET
	CBIT DIR			;DIRECTION FOR SPECIAL TARGET

	.PAGE
	.SBTTL CONTROL ADDRESS ASSIGNMENTS


HVLD	=400				;MOVING OBJECT H AND V (EVEN=V/ODD=H)
PLYFLD	=800				;PLAYFIELD (128 BYTES)
POTS	=1000				;POT INPUT
OPTION	=1001				;4 OPTION SWITCHES
COINSW	=1400				;COINA/COINB/FIRE1/(7,6,5,4)
CTLSW	=1401				;TEST/START/EP/NU (7,6,5,4)
COINOP	=1400
PIXLD	=1C00				;OBJECT PIX LOAD (EVEN=PIX/ODD=NU)
SLEW	=4000				;TERRAIN SLEW OUTPUT
SNDOUT	=4400				;SOUND CONTROL
					;BIT 5 = ATTRACT (NO SOUND)
					;BIT 4 = PLANE LOUD
					;BIT 3 = /START (START LAMP)
					;BIT 2 = /EXPLOSION (PULSE LOW)
					;BIT 1 = MISSLE (PULSE HIGH)
					;BIT 0 = PLANE SWEEP

DTOA	=4800				;DIGITAL TO ANALOG OUTPUT
WTCHDG	=5000				;GAME RESET CIRCUIT
OFFSET	=5800				;POT OFFSET

..SND	=1
SNDPOL	=0

	.MACRO SNDGEN NAME,POL
SND.'NAME=..SND
SNDPOL	=SNDPOL+<..SND*POL>		;POLARITY
	..SND=..SND+..SND
	.ENDM

	SNDGEN	JS,0			;JET SOUND SWEEP
	SNDGEN	MS,0			;MISSLE (NORM 0)
	SNDGEN	EX,0			;EXPLOSION (NORM 0)
	SNDGEN	ST,1			;START LAMP (NORM 1)
	SNDGEN	JL,0			;JET SOUND LOUD
	SNDGEN	AT,0			;ATTRACT (NORMALLY 0)

IRQ	=0F428
O.HSOP	=10   				;ALTERNATE HIGH SCORE OPTIONS
O.EP	=80				;EXTENDED PLAY OPTION
O.DGN	=40				;DIAGNOSTIC OPTION
B.STRT  =40				;START SWITCH
B.TEST	=80				;TEST SWITCH
B.HSR	=20				;HI SCORE RESET
B.SLAM	=10				;SLAM SWITCH
	.PAGE
	.SBTTL PROGRAM CONTROL CONSTANTS
FLOOR	=050			;POINT BELOW WHICH CURSOR MAY NOT MOVE
RWALL	=0E0			;RIGHT LIMIT
LWALL	=40			;LEFT LIMIT

P.CURSOR=5			;CURSOR PIX
	.PAGE
	.SBTTL TEST ROUTINE
CHK1:	.WORD 0
	.IIF NE,R137,ID1:	.BYTE 'R,2F
	.IIF NE,R185,ID1:	.BYTE 'R,2F
	.IIF NE,R8316,ID1:	.BYTE 'E,'E
	.IIF EQ,R137+R185+R8316,ID1:	.BYTE 'A,'B
CHK2:	.WORD 0
	.IIF NE,R137,ID2:	.BYTE 'N,'K
	.IIF NE,R185,ID2:	.BYTE 'R,2F
	.IIF NE,R8316,ID2:	.BYTE 'E,'E
	.IIF EQ,R137+R185+R8316,ID2:	.BYTE 'A,'B
	.IF NDF,PROMV
VSADR:	.WORD INTRPT
	.ENDC
	.CSECT TEST
CHKADR:	.WORD CHK1,CHK2,CHK3,CHK4	;ADDRESSES OF CHECKSUMS
RESET:	DNOP
	LDS <I,0FF>
	CLD
	.IF NDF,PROMV
	MOV <A,IRQ>,<A,VSADR>		;COPY INTERRUPT VECTOR
	.ENDC
	.ENABLE LSB
TEST:	LDX I,0				;TEST PAGE ZERO
	TXA				;CLEAR ACC
6$:	SEC				;START WITH 0 IN ACC,1 IN CARRY
2$:	STA ZX,0			;STORE BIT
	CMP ZX,0			;DID IT WORK?
	BNE 3$				;NOPE
	ROL				;NEXT BIT
	BCC 2$
	STA A,WTCHDG			;THIS TAKES A WHILE
	INX				;NEXT LOCATION
	BNE 6$				;AGAIN
1$:	TXA
	STA ZX,0			;WRITE PG ZERO ADDRESS INTO CELL
	INX
	BNE 1$
5$:	TXA				;NOW SEE IF WE WROTE IT
	CMP ZX,0			;MATCH?
	BEQ 4$				;YEP
3$:	TAY				;Y='SHOULD BE' DATA
	BIT A,OPTION			;DIAGNOSTIC?
	BVS 7$				;NO
8$:	LDA ZX,0			;THIS IS WHAT IT IS
	STA A,WTCHDG			;DISPLAY WHAT WAS READ
	STY A,WTCHDG			;DISPLAY WHAT SHOULD BE
	JMP 8$  			;LOOP
7$:	LDY I,2C			;PREPARE FOR 'HJ' MESSAGE
	EOR ZX,0			;SET FAILING BITS
	AND I,0F0			;HIGH SIDE?
	BNE ERRM			;YEP
	LDY I,2D			;NO.LOW SIDE 'FH' MESSAGE

ERRM:	TYA
	STA AX,PLYFLD			;BRUTE FORCE ERROR MESSAGE
	DEX
	LDA I,'1			;ALL CHIPS ARE IN ROW '1'
	STA AX,PLYFLD
	DEX
	JMP ERRM			;JUST KEEP GOING UNTIL WATCHDOG BARKS
	
4$:	INX
	BNE 5$
	.DSABL LSB			;PAGE 0 IS ALL RIGHT
CSUM:	LDX I,7		;8 BYTES
1$:	MOVB <ZX,ZLO+1>,<AX,CHKADR>
	DEX
	BPL 1$
	CLR <R2>	;INDEX STARTS AT ZERO
	MOVB R4,<I,2>	;START INDEX AT 2
	MOVB R5,<I,74>	;START CHECKSUM AT 7400
6$:	MOVB R3,R5			;RE-TRY ENTRY
	STA A,WTCHDG
5$:	LDX I,3		;4 PAGES
	CLR <R0,R1>	;CLEAR SUMS
	TAY		;AND 'Y'
2$:	LDA NY,R2	;GET DATA
	AND I,0F	;MASK LOWER BITS
	ADD R0		;ACCUMULATE
	AND I,0F	;MASK AGAIN
	STA R0		;SAVE 'EM
	LDA NY,R2	;GET DATA AGAIN
	AND I,0F0	;MASK UPPER BITS
	ADD R1		;ACCUMULATE
	STA R1		;SAVE 'EM
	INY		;NEXT ADDRESS
	BNE 2$
	STA A,WTCHDG	;THIS TAKES A WHILE
	INC R3		;NEXT PAGE ADDRESS
	DEX
	BPL 2$		;4 PAGES
	LDY R4
	LDX R4		;CHECKSUM ADDRESS INDEX => 'X'
	LDA ZX,ZLO+1	;GET ADDRESS
	STA R6		;SAVE IT FOR RE-TRY
	LDA NX,ZLO+1	;GET CHECKSUM
	AND I,0F	;MASK IT
	CMP R0		;MATCH?
	BNE 3$		;NO
	LDA NX,ZLO+1	;GET CHECKSUM AGAIN
	AND I,0F0	;MASK
	CMP R1		;MATCH?
	BNE 4$		;NO
	INXS 2		;BUMP INDEX
	STX R4		;SAVE IT
	CPX I,8		;DONE?
	BMI 5$		;NOPE
	JMP DGN1	;YEP
4$:	INC ZX,ZLO+1	;SKIP OVER CHECKSUM
	INY
3$:	INC ZX,ZLO+1	;AND ITS COMPLIMENT
	INC ZX,ZLO+1	;(OR LSB ERROR BYTE)
	LDA NX,ZLO+1	;GET ID CHARACTER
	BIT A,OPTION	;DIAGNOSTIC?
	BVC 7$		;YES. FETCH DEFAULT CHARACTER
9$:	TAY		;ELSE PUT CHAR IN Y
	JMP ERRM	;AND DISPLAY MESSAGE
7$:	LDA AY,CSFAIL	;GET DEFAULT CHARACTERS
	BNE 9$
CSFAIL:	.BYTE 'R,2F,'N,'K,'P,'L,2E,'J
	.CSECT MAIN

DGN1:	MOVB OFFY,<I,32.>		;INITIZLISE OFFSET
	STA OFFX
	CLR <COINC,COINTL,COINTR>
	ERASE				;CLEAR SCREEN
	MVI LNG1,DGNM
	BIT A,OPTION			;DIAGNOSTIC?
	BVS DGN0			;NO
	SEI
	LDA A,COINSW			;GET DIAG #
	AND I,7				;MASK
	TAX
	CLR R0				;MEMORY POINTER LSB
	LDA AX,DGNADR			;GET DIAGNOSTIC ADDRESS
	LSR				;ADJUST IT
	STA R1				;STORE MSB
	ROL R0				;STORE LSB
	LDX I,0				;INDIRECT POINTER
	BIT R1				;INPUT OR OUTPUT?
	BVS 2$				;OUTPUT
3$:	LDA NX,R0			;READ DATA
	STA A,WTCHDG
	BVC 3$				;LOOP
2$:	LDA A,1400			
	AND I,10			;GET SW 7
	ASLS 2				;PUT IN IN 2^6
	STA R2				;SAVE IT
	LDA A,1001			;GET OTHER SWITCHES
	LSRS 2
	TAX
	AND I,38			;6,5,4
	ORA R2
	STA R2
	TXA				;2
	LSR
	AND I,2
	ORA R2
	STA R2
	LDA A,1000			;3,1
	LSRS 3
	TAX
	AND I,4
	ORA R2				;3
	STA R2
	TXA
	LSR
	AND I,1
	ORA R2				;1
	LDX I,0
	STA NX,R0			;WRITE IT
	STA A,WTCHDG			;SYNC
	BVS 2$				;LOOP
1$:	DNOP
DGN0:	CLR R8				;CONVERT CREDITS TO BCD
	SED				;DECIMAL MODE FOR CONVERSION
	LDA COINC			;GET CREDIT COUNT
	LSR				;MAKE WHOLE
	STA R0				;KEEP
	LDA I,1				;BEGIN AT 1
	STA R1
2$:	TAX
	BIT R0				;BIT SET?
	BEQ 1$				;NOPE
	ADDB R8,R1			;YEP. ADD IN VALUE
1$:	ADDB R1,R1			;DOUBLE CONVERSION FACTOR
	TXA				;GET FLYING BIT
	ASL				;MOVE IT
	BCC 2$				;NOT DONE
	CLD				;BACK TO BINARY MODE
DGN2:	WAIT
	LDY I,0
	JSR DIASPC			;WRITE DIAGNOSTIC MSGS
	LDA A,COINOP
	AND I,0F
	ORA I,'0
	STA A,PLYFLD+5F			;WRITE THE COIN OPTION SETTING
	LDX I,R8
	LDY I,1E	
	CVTA				;WRITE GAME CREDITS
	LDA A,OPTION			;GET TIME OPTIONS
	LSRS 4
	AND I,3
	TAX
	LDA AX,DIAM1
	TAY
	JSR DIASPC			;WRITE GAME TIME
	LDY I,BPM-DGNM
	LDA I,O.EP
	AND A,OPTION		;BONUS PLAY ENABLED?
	BEQ 4$			;YES
	JSR DIATPC		;NO. ERASE BP MESSAGE
	BEQ 7$			;(ALWAYS)
4$:	JSR DIASPC		;YES. WRITE BP MESSAGE
5$:	LDY I,'H
	LDA I,O.HSOP
	BIT A,COINSW
	BNE 6$
	LDY I,'L
6$:	STY A,PLYFLD+84
7$:	LDX I,POTY			;POT U/D
	LDY I,62
	CVTA				;CONVERT TO ASCII
	INX
	LDY I,42
	CVTA				;POT L/R
	SET SYNC,CS.DGN!CS.SYN		;ENABLE SYNC & SET DIAGNOSTIC MODE
	LDA A,COINSW			;GET SWITCHES
	EOR I,30			;INVERT THE SWITCH POLARITY
	AND I,0E0
	STA R0
	LDA A,CTLSW
	LDX I,0
	AND I,B.STRT			;START BUTTON PUSHED?
	BNE 2$					;NOPE
	LDX I,SND.EX			;ELSE HIT EXPLOSION SOUND
2$:	LDA A,CTLSW
	AND I,B.HSR!B.SLAM			;MASK
	EOR I,B.HSR!B.SLAM			;INVERT THEM
	ORA R0				;ANY SWITCH PRESSED?
	BEQ 1$				;NOPE
	TXA
	ORA I,SND.MS			;TURN ON MISSLE NOISE
	TAX
1$:	TXA
	ORA I,SND.ST			;TURN ON START LAMP
	STA SOUND
	POTINP				;READ POTS
	LDY I,87
	LDX I,0F
3$:	STY ZX,SIGHTX
	TXA
	ASLS 4
	STA ZX,SIGHTY
	STY ZX,SIGHTC
	DEXS 2
	DEY
	BMI 3$
DW:	WAIT			;ALLOW OBJECT TABLE STUFF
	CLR SYNC		;EVERY OTHER FRAME
	BIT A,CTLSW			;TEST MODE?
	BMI 2$			;NO
	JMP DGN0			;LOOP
2$:	DNOP
	JMP REST1
	
CVTA:	LDA ZX,0			;CONVERT TO ASCII
	LSRS 4
	ORA I,30
	STA AY,PLYFLD			;WRITE IT
	LDA ZX,0
	AND I,0F
	ORA I,30
	STA AY,PLYFLD+1
	RTS
	
DGNADR:	.BYTE 20,21,28,29,80,88,90,0B0
	
	.ASECT
	.PAGE
	.SBTTL MAIN LINE ENTRY
REST1:	CLR <SCORE,SCORE+1,HISCOR,HISCOR+1>
REST0:	SEI
	LDS <I,0FF>
	CLD
	LDA I,0
	LDX I,ZLOW-1
1$:	STA ZX,0			;CLEAR LOW PZ
	DEX
	BPL 1$

ATTRCT:	ERASE				;CLEAR EVERYTHING
	MSG HISC
	MOVB SYNC,<I,CS.ATR>		;SET ATTRACT MODE
	BMI BGN				;(ALWAYS)
GAME:	ERASE				;BEGIN GAME
	STA SCORE			;ACC=0 FROM 'ERASE'
	STA SCORE+1
	SET SOUND,SND.ST		;TURN ON START LAMP DURING GAME
	MSG MT				;TIME
BGN:	MSG SCORM			;PLAYER SCORE
	INTZRO				;SET OBJECT TABLES
	ESYNC				;ENABLE PROCESSING
	GTM				;GET GAME TIME
MAIN:	WAIT				;SYNCRONIZE TO VBLANK
	.PAGE
	.SBTTL POT INPUT
	
	POTINP				;DO THE POT JUNK
	
	.CSECT ONE
	
POTINP:	LDX I,0				;ANSWER GOES TO POTX, POTY
	MOVB R0,<I,40>			;POT BIT MAP
1$:	MOVB <A,OFFSET>,<ZX,OFFY>
	MOVB <ZX,POTY>,<I,32.>		;INITIAL VALUE
	LSR
	STA R1				;INITIAL INCREMENT
2$:	MOVB <A,DTOA>,<ZX,POTY>		;DO DIGITAL TO ANALOG
	LDA R0				;GIVE A COUPLE MU SECONDS TO SETTLE
	NOPS
	AND A,POTS			;POT REACT?
	BEQ 3$				;NO
	ADDB <ZX,POTY>,R1		;INCREMENT
4$:	LSR R1				;HALVE INCREMENT
	BNE 2$				;CONTINUE
	BEQ 5$				;DONE
3$:	SUBB <ZX,POTY>,R1		;DECREMENT
	BPL 4$				;(ALWAYS+)
5$:	LDA ZX,POTY			;MINIMUM?
	CMP I,1
	BNE 6$				;NO
	LDA I,1				;POT AT LOWER EXTREME. RAISE VOLTAGE
	BNE 7$				;(ALWAYS)
6$:	CMP I,3F			;MAXIMUM?
	BMI 8$				;NO. NO OFFSET ADJUSTMENTS RQD.
	LDA I,-1			;POT AT UPPER EXTREME. LOWER VOLTAGE
7$:	ADD <ZX,OFFY>			;UPDATE OFFSET REG
	CMP I,40			;OVERFLOW/UNDERFLOW?
	BCS 8$				;YES. CAN'T GO ANY FURTHER
	STA ZX,OFFY			;KEEP UPDATED OFFSET
8$:	INX				;NEXT POT
	ASL R0				;ROLL THE BIT MAP
	BCC 1$				;BOTH POTS
	RTS
	
	.ASECT
	
	BIT SYNC			;ATTRACT MODE?
	BPL 9$				;NO. GO DO CURSOR STUFF
	LDX I,0
	LDA I,B.HSR
	AND A,CTLSW			;HI-SCORE RESET?
	BNE 10$				;NOPE
	LDX HSRTIM			;TIME THE BUTTON FOR
	CPX I,60.			;1 SEC.
	BCC 11$				;NOT TIME YET.
	STA SCORE			;YES. RESET THE SCORES
	STA SCORE+1
	STA HISCOR
	STA HISCOR+1
10$:	DNOP
	STX HSRTIM
11$:	MOVB VEL,ABSVEL
	JMP TERAIN			;ELSE SKIP TO TERRAIN MOTION
9$:	DNOP

	.SBTTL CURSOR MOTION
CMX:	LDA POTX	;GET CURRENT X POT VALUE
	LSR		;MASK LOWER BIT (MAKE A 1 OF 32) 'N'
	STA R0		;SAVE IT FOR A MOMENT (N*1)
	ASLS 2		;A=N*4
	ADC R0		;A=N*4+N*1 (N*5)
	ADD <I,LWALL>	;OFFSET BY LEFT LIMIT
	STA R1		;SAVE IT
	SUB SIGHTX+1	;COMPUTE DIFFERENCE
	ROR		;USE 1/2 OF THE DIFFERENCE
	EOR I,80	;(INVERT THE CARRY)
	LDX I,-20	;MAXIMUM NEGATIIVE DIFFERENCE
	CMP I,-20	;TOO FAR NEGATIVE?
	BCS 2$		;NOPE. IT OK AS IS
	TAY		;RESET THE CC'S
	BMI 3$		;ITS MINUS. USE THE LIMIT
	LDX I,20	;ELSE CHECK FOR DIFFERENCE TOO GREAT
	CMP I,20	;IS IT?
	BCC 2$		;NOPE. ITS OK AS IS
3$:	TXA		;USE THE LIMIT
2$:	STA R1		;THIS IS THE NUMBER TO USE
	CLR R0		;R0=> LOW BITS
	LDA I,18	;0.1875
	MULT R2,R0	;COMPUTE FRACTION OF DIFFERENCE
	ADDB SIGHTX,R2
	LDA R3
	ADC SIGHTX+1	;COMPUTE NEW POSITION
	LDX I,LWALL
	CMP I,LWALL	;TOO FAR LEFT?
	BCC 4$		;YEP.
	LDX I,RWALL
	CMP I,RWALL	;TOO FAR RIGHT?
	BCC 5$		;NO
4$:	CLR SIGHTX	;RESET THE LSB'S
	TXA		;AND USE THE LIMIT
5$:	STA SIGHTX+1	;STORE UPDATED POSITION

CMY:	LDA POTY
	AND I,3E			;MASK LSB
	ASL				;*2
	ADD <I,80>			;FORCE IT TO A MINIMUM
	STA ABSVEL			;KEEP IT
	SUB VEL				;WHICH WAY TO GO?
	PHP				;SAVE THE CARRY
	LSRS 4				;DIVIDE BY 16
	PLP				;RESTORE CARRY
	BCS 1$				;ITS OK AS IS
	ORA I,0E0			;ITS MINUS. PROPAGATE THE SIGN
1$:	ADD VEL				;UPDATE THE VELOCITY
	LDX I,0E0
	CMP I,0E0			;CAN'T GO TOO FAST
	BCS 2$
	TAX
2$:	STX VEL				;UPDATE VELOCITY
	.PAGE
	.SBTTL MISSLE COLLIDING WITH TARGET
EXPL:	LDX I,5
9$:	LDA ZX,MISCTL			;MISSILE ACTIVE?
	BMI 10$
	JMP 4$
10$:	AND I,4				;SMALL PIX YET?
	BNE 11$
14$:	JMP 8$
11$:	LDA ZX,MISX-1			;AT DESTINATION
	SUB <ZX,MISY>
	CMP I,16.
	BCS 14$				;NO.
	PHX				;YES. SAVE X. CHECK FOR MISSILE HITTING TARGET
	SUBB R0,<ZX,MISX>,<I,16.>	;COPY MISSILE CO-ORDINATES
	SUBB R1,<ZX,MISY>,<I,8>
	LDX I,7
7$:	LDA ZX,TGTCTL			;TARGET ACTIVE?
	BPL 3$				;NO
	LDA ZX,TGTX
	ADD <I,38.>
	SUB R0
	BCS 12$
	EOR I,0FF
	ADC I,1
12$:	CMP I,33.			;COMPARE TO 64 (X WINDOW)
	BCS 3$				;HAS TO BE <=32
	LDA ZX,TGTY
	SUB <I,16.>
	SUB R1
	BCS 5$
	EOR I,0FF
	ADC I,1
5$:	CMP I,17.			;COMPARE TO 16 (Y WINDOW)
	BCS 3$
	LDA ZX,TGTCTL			;GET THE PIX
	AND I,7
	TAY
	STA R0
	CMP I,JET&7
	BNE 16$
	RES SOUND,SND.JL!SND.JS
16$:	MOVB <ZX,TGTCTL>,<AY,TGTVLU>	;CHANGE TO EXPLOSION PIX
	LDA I,SND.EX
	ORA SOUND
	STA SOUND			;BOOM!
6$:	LDY R0
	SED
	ADDB SCORE,<AY,BCDSCR>		;ACCUMULATE SCORE (IN BCD)
	ADDB SCORE+1,<I,0>,,C
	CLD
	LDA SIGHTY+1
	CMP I,090
	BCS 15$
	ADDMI SIGHTY,180
15$:	PLX
2$:	CLR <<ZX,MISY>,<ZX,MISCTL>>	;DEACTIVATE MISSLE
4$:	BEQ 1$				;(ALWAYS)
3$:	DEXS 2
	BPL 7$
	PLX
8$:	LDA ZX,MISY
	SUB <ZX,MISX-1>			;SEE IF MISSLE PASSED DESTINATION POINT
	BCS 2$				;IT DID. GO TURN IT OFF
1$:	DEXS 2
	BMI 13$
	JMP 9$
13$:	DNOP
	.PAGE
	.SBTTL MISSILE MOTION

MISSLE: LDX I,5
8$:	LDA ZX,MISCTL    		;MISSLE ACTIVE?
	BMI 1$				;YES. THERE IS MISSLE STUFF
	LDA A,COINSW
	AND I,20			;BUTTONS PUSHED?
	BNE 5$				;NO. IGNORE EMPTY MISSLE
	LDA MSLTME			;OK TO FIRE?
	CMP I,2				;1/2 SECOND DELAY
	BCC 5$				;NO. IGNORE FIRE.
	LDA SOUND			;MAKE SOME NOISE
	ORA I,SND.MS
	STA SOUND
	CLR MSLTME
	MOVB <ZX,MISX>,SIGHTX+1	;ACTIVATE MISSLE
	MOVB <ZX,MISX-1>,SIGHTY+1
	MOVB <ZX,MISCTL>,<I,C.ACT>
1$:	CLR <R0,R1>
	LDA SIGHTY+1			;GET CURRENT CURSOR Y
	SUB <I,FLOOR>			;NORMALIZE
	ASLS 2				;*4
	ROL R1				;SAVE THE CARRY
	ADC ZX,MISY-1			;UPDATE THE POSITION
	STA ZX,MISY-1
	LDA ZX,MISY
	ADC I,2				;MINIMUM OF 200
	ADD R1				;AND THE SAVED CARRY
	STA ZX,MISY			;NEW MISSILE Y POSITION
	SUB <I,24.>			;FIRST 24 LINES PIX 0 & 1
	BCC 5$
	ROLS 2,R0
	SUB <I,24.>			;SECOND 24 LINES PIX 2 & 3
	BMI 6$
	ASL R0
6$:	LDA R0
	CMP I,4
	BMI 7$
	ORA ZX,MISCTL			;GET OLD DATA
	AND I,0FC			;PIX 4 ONLY ONE ALLOWED
	STA ZX,MISCTL
7$:	ORA ZX,MISCTL			;ELSE PIX 0 & 1 OR 2 & 3 MUST BE USED
	STA ZX,MISCTL
5$:	DEXS 2
	BPL 8$
	.PAGE
	.SBTTL TERRAIN AND TARGET MOTION

TERAIN:	ADDM SLWREG,VEL			;UPDATE SLEW
	LDA VEL
	ASL
	STA R0
	LDA VEL+1
	ROL
	STA R1
	LDA R0
	ASL
	STA R2
	LDA R1
	ROL
	STA R3
	LDA I,60			;0.75
	MULT R4,R2			;COMPUTE:R4=R2*0.75
	LDX I,7
T0:	LDA ZX,TGTCTL			;TARGET ACTIVE ?
	BMI T3				;YES.
	LDY I,0
	LDA NY,MAPNDX
	CMP SLWREG+1			;MATCH?
	BEQ T1 			;YEP
	JMP T2
T1:	INY
	.ENABL LSB
	LDA NY,MAPNDX			;GET INITIAL PIX DATA (ALREADY ACTIVATED)
	STA ZX,TGTCTL
	INY
	LDA NY,MAPNDX			;GET INIT DATA
	STA ZX,TGTX			;SAVE X POSITION
	MOVB <ZX,TGTY>,<I,0FF>		;INITIAL Y POSITION
	ADDMI MAPNDX,3			;TO NEXT MAP POINT
	DNOP
	LDY I,0
	LDA NY,MAPNDX
	BNE 15$
	MVI MAPNDX,TRGTS
15$:	LDY I,1				;IS THE NEXT ONE A JET?
	LDA NY,MAPNDX
	AND I,7
	CMP I,6				;YET?
	BNE 12$				;NO. DON'T WORRY ABOUT IT
	SET SOUND,SND.JL		;LOUD JET
12$:	LDA ZX,TGTCTL
T3:	AND I,C.SPC!C.DIR		;SPECIAL TARGET?
	BEQ 1$				;NO
	AND I,C.DIR			;DIRECTION
	BEQ 8$				;RIGHT TO LEFT
	ADDM <ZX,TGTX-1>,R4		;ZIP ACROSS SCREEN
	CMP I,0E0			;TOO FAR?
	BCS 7$				;YES. TURN IT OFF
	BCC 9$
8$:	SUBM <ZX,TGTX-1>,R4		;ZIP THE OTHER WAY
	BCC 7$				;DONE
9$:	SUBM <ZX,TGTY-1>,R2		;ZIP DOWN THE SCREEN
	CMP I,0C0			;HALF WAY?
	BCS T2				;NO. NO SWEAT
	PHA
	SET SOUND,SND.JS		;SWEEP IT
	PLA
	CMP I,17.			;OFF THE SCREEN?
	BCS T2				;NOPE
7$:	RES SOUND,SND.JL!SND.JS		;YES. TURN OFF THE JET NOISE
	JMP 2$				;AND GO DISABLE OBJECT
1$:	SUBM <ZX,TGTY-1>,R0		;HERE IS TARGET VELOCITY
	CMP I,17.			;AT TOP OF PIX?
	BCS T2				;NO.
2$:	PHX				;YES. DE-ACTIVATE IT
5$:	DEXS 2
	BPL 6$				;KEEP GOING
	PLX
	BPL T4
6$:	MOVB <ZX,TGTCTL+2>,<ZX,TGTCTL>	;SCOOT ALL OTHER OBJECTS UP.
	MOV <ZX,TGTX+1>,<ZX,TGTX-1>
	MOV <ZX,TGTY+1>,<ZX,TGTY-1>
	CLR <<ZX,TGTCTL>,<ZX,TGTY>>	;DE-ACTIVATE TARGET
	BEQ 5$
T2:	DEXS	2
	BMI T5
T4:	JMP T0
T5:	DNOP
	.DSABL LSB
	JMP TIMOUT
	.REPT 7800-./2	;PUT SPACE AT END OF SECOND K
	.BYTE 0
	.ENDR
	.PAGE
	.SBTTL GAME TIME, ETC.
TIMOUT:	LDA FRMC+1			;4 MINUTE TIME OUT?
	BPL NELT			;NO
	LDA COINC			;ANY CREDIT?
	ORA COINTL			;ANY COIN ACTIVITY?
	ORA COINTR
	BNE NELT			;YES, IGNORE TIMOUT
	JMP REST0			;NO, RESET GAME
NELT:	BIT SYNC			;ATTRACT MODE?
	BMI 1$				;YES, SKIP TIMER
	LDA FRMC
	CMP FRMTME			;CLOCK TICK?
	BCC 1$				;NO
	CLR FRMC
	SED 
	SUBB SECNDS,<I,1>		;DECREMENT BCD TIME
	CLD
	CMP I,99			;99?
	BNE 1$				;NO
	LDA I,O.EP
	BIT A,OPTION			;EXTENDED PLAY OPTION AVAILABLE?
	BNE 3$				;NO. GAME OVER
	LDA I,CS.EP			;EXTENDED PLAY ALREADY?
	BIT SYNC
	BNE 3$				;YES. GAME OVER
	LDA SCORE+1			;EXTENDED PLAY SCORE
	CMP BNUS+1
	BCS 2$				;YES.
3$:	LDA SCORE+1		;GET MSB SCORE
	CMP HISCOR+1		;MATCH OLD HI SCORE?
	BCC 6$			;NO, ITS SMALLER
	BNE 7$			;NO, ITS BIGGER
	LDA SCORE		;GET LSB SCORE
	CMP HISCOR		;MATCH OLD HI SCORE?
	BCC 6$			;NO, ITS SMALLER
7$:	MOV HISCOR,SCORE	;ITS BIGGER OR SAME
6$:	JMP ATTRCT		;OFF TO ATTRACT MODE
2$:	SET SYNC,CS.EP			;SIGNAL EP IN PROCESS
	GTM				;RESET GAME TIMER
1$:	DNOP				;EXIT
	
	.CSECT ONE
GTM:	LDA A,OPTION			;LSB'S ARE TIME OPTION
	LSRS 4				;PUT THEM WHERE THEY CAN BE USED.
	AND I,3				;MASK THEM
	TAX
	MOVB FRMTME,<AX,GMTIMD>		;GET # OF FRAMES/CLOCK TICK
	LDA I,O.HSOP			;ALTERNATE SCORES
	BIT A,COINSW
	BNE 2$				;NO
	INXS 4				;YES. ADD 4 TO X
2$:	MOVB BNUS+1,<AX,GMBNS>
	LDX I,99
	LDA I,CS.EP
	BIT SYNC			;EP?
	BEQ 1$				;NO
	LDX I,50			;YES. RESET TO 50
1$:	STX SECNDS
	RTS
GMTIMD: .BYTE	36.,48.,60.,72.		;#FRAMES/CLOCK TICK
GMBNS:	.BYTE	22,29,36,43
	.BYTE	13,18,27,34
	.ASECT
	.PAGE
	.SBTTL GAME STARTER
GMSTRT:	LDA COINC			;ANY CREDIT?
	CLC
	AND I,0FE
	BEQ 1$				;NO
	SEC
1$:	LDA I,0
	BIT SYNC			;ATTRACT MODE?
	BPL 3$				;NO.
	ORA I,SND.AT			;YES. TURN OFF SOUNDS
	TAX
	BCC 2$				;NO CREDIT
	LDA BLINK			;TIME TO BLINK?
	AND I,10
	BNE 2$
	TXA
	ORA I,SND.ST
	TAX
2$:	STX SOUND			;AND ANYTHING ELSE
	BCC 3$				;NO CREDIT
	BIT A,CTLSW			;START BUTTON PRESSED?
	BVS 3$				;NO.
	DEC COINC			;YES. TAKE COIN CREDITS
	DEC COINC
	LDS <I,0FF>			;RESET STACK
	CLD
	JMP GAME
3$:	DNOP
	BIT A,CTLSW			;TEST MODE SWITCH ON?
	BPL 8$				;YEP. DO A RESET.
	LDA OFFX			;SEE IF OFFSET BLEW UP
	ORA OFFY
	AND I,0C0
	BEQ 5$				;OK AS IS
8$:	JMP RESET			;IT DID. SUMPIN' IS VERY WRONG
5$:	DNOP
	JMP MAIN			;BACK TO MAIN LOOP

	.PAGE
	.SBTTL	SYNC TO VBLANK
	.CSECT MAIN

SYNWT:	CLI
	LDA I,CS.SPR			;SYNC PROCESSED?
	BIT SYNC
	BNE 1$				;YEP. EXIT
	JSR LFC				;ANY COIN STUFF?
	BCC SYNWT			;NO. JUST WAIT FOR VBLANK
	SEI				;YES
	PHX
	PHY
	COIN				;GO DO COIN TIMING.
	PLY
	PLX
	JMP SYNWT			;CONTINUE
1$:	EOR SYNC
	STA SYNC			;RESET SYNC BIT
	SEI
	DNOP
	RTS				;EXIT
	.PAGE
	.SBTTL COIN STUFF
	.CSECT ONE
	.ENABL LSB
COIN:	CLR <R2,R3>			;CLEAR TIMERS
1$:	LDA COINTL			;COIN TIMING CONTROL
	AND I,80			;BIT SETS IF COIN ALREADY TIMED OUT
	STA R1				;SAVE BIT
2$:	LDA I,B.SLAM
	AND A,CTLSW			;SLAM?
	BEQ CEND			;YES
	LDA A,COINSW			;GET COIN SWITCH (BIT 7)
	STA A,WTCHDG			;KICK THE WATCH DOG
	EOR R1				;TIMING?
	BPL 4$				;NO
	BIT R1				;TIMED OUT?
	BMI 3$				;YEP
	DEC R2				;NO. DEBOUNCE COUNT DOWN
	BEQ 5$				;TIME OUT
	JSR COINB			;DO COIN B
	JMP 2$				;LOOP UNTIL TIME OUT
5$:	LDA COINTL
	EOR I,80			;CHANGE THE CONTROL BIT
	STA COINTL
4$:	CLR R2				;RESET TIMER
	JSR COINB 			;ANY B COIN STUFF GOING ON?
	BCS 1$				;YEP, KEEP LOOPING
CEND:	RTS				;NO,DONE
3$:	LDY I,1				;INDICATE LEFT SIDE
	GCOINO				;GO GET COIN OPTION CREDIT IN R0
	LDA COINTL
	CPX I,12.			;IS IT THE WIERD 3 COINS/PLAY?
	BNE 6$				;NOPE
	ORA I,00			;YEP. SIGNAL SAME
	AND I,7F			;DROP TIMING BIT
	ADD R0				;ACCUMULATE CREDIT
	STA COINTL			;SAVE IT
	AND I,0F
	CMP I,6				;ENOUGH CREDIT?
	BMI 4$				;NOPE
6$:	ADDB COINC,R0			;YEP. ACCUMULATE CREDIT
	CLR COINTL			;ZERO TIMING REG
	BEQ 4$				;PROCEED
	.DSABL LSB
COINB:	LDA COINTR			;COIN TIMING CONTROL
	AND I,80			;BIT SETS IF COIN ALREADY TIME OUT
	STA R0				;SAVE IT
1$:	LDA A,COINSW			;GET COIN SWITCH (BIT 6)
	ASL
	EOR R0				;TIMING?
	BPL 3$				;NO
	BIT R0				;TIMED OUT
	BMI 2$				;YEP
	DEC R3				;DEBOUNCE. TIME OUT?
	BEQ 4$				;YES
	SEC				;NO. SIGNAL TIMING
	RTS				;RETURN
4$:	LDA COINTR
	EOR I,80			;CHANGE CONTROL BIT
	STA COINTR
3$:	CLR R3				;RESET TIMER
	CLC				;NOT TIMING B
	RTS				;RETURN
2$:	LDY I,0				;INDICATE RIGHT SIDE
	GCOINO				;GO GET COIN OPTION CREDIT IN R0
	ADDB COINC,R0			;ACCUMULATE CREDITS
	CLR COINTR			;RESET TIMER
	JMP 3$
	.PAGE
	
	.CSECT MAIN
LFC:	LDA I,B.SLAM
	AND A,CTLSW			;SLAM SW ON?
	BNE 2$			;NOPE
	SEC
	ROR LOCK+1
	MOVB LOCK,<I,12.>
	RES COINTL,80		;DROP LEFT TIMING BIT
	CLR COINTR		;DROP RIGHT TIMING BIT
3$:	CLC
	RTS
2$:	BIT LOCK+1			;COIN LOCKOUT?
	BMI 3$				;YES
	LDA A,COINSW			;GET COIN DATA (BITS 7 AND 6)
	AND I,0C0			;MASK ONLY COIN SWITCHES
	EOR I,000			;INVERT THEM
	STA R0				;SAVE THEM
	LDA COINTR
	LSR
	ORA COINTL
	AND I,0C0			;MASK OFF ALL BUT COIN BITS
	CLC
	EOR R0				;SAME AS EXPECTED?
	BEQ 1$				;YEP
	SEC				;NOPE. THE COIN ROUTINE MUST BE EXECUTED
1$:	RTS				;EXIT

	
	.CSECT ONE
GCOINO:	LDA A,COINOP			;GET COIN OPTIONS
	AND I,0F			;MASK OFF UPPER BITS
	DEY				;WHICH MECH?
	BPL 1$				;LEFT
	ADD <I,10>			;RIGHT
1$:	TAX
	LDA AX,COPT			;GET OPTION CREDIT
	LDY COINC			;ANY CREDITS ALREADY?
	BNE 2$				;YEP.
	LSRS 4				;NOPE. USE THE UPPER BITS
2$:	AND I,0F			;IN CASE OF USE OF LOWER BITS
	STA R0				;NUMBER
	INC R0				;+1
	RTS

	.MACRO OPTGEN OP
	.IRP X,<OP>
	PAIR X
	.ENDR
	.ENDM

	.MACRO PAIR X,Y
	.BYTE X-1*10+<Y-1>
	.ENDM

;OPTGEN TABLE CONTAINS 2 GROUPS OF 16 BYTES. THE FIRST
;GROUP IS FOR THE LEFT COIN MECH AND THE SECOND GROUP IS
;FOR THE RIGHT MECH. THE 4 MSB'S HAVE THE
;CREDITS ALLOWED FOR THE FIRST COIN AND THE 4 LSB'S
;HAVE THE CREDITS ALLOWED FOR THE SECOND AND SUBSEQUENT
;COINS. THE LSB OF EACH IS COUNTED AS A HALF CREDIT.
;OPTION 'C' IS THE ONLY WIERD ONE WHERE 3 COINS ARE
;REQUIRED PER CREDIT. THIS IS A SPECIAL CASE TESTED FOR
;AND HANDLED BY CUSTOM CODE.

COPT:	OPTGEN <<1,1>,<2,2>,<4,4>,<6,6>,<2,4>,<4,6>,<4,4>,<2,2>> ;0-7 LEFT
	OPTGEN <<4,4>,<2,4>,<4,6>,<6,8>,<2,2>,<2,2>,<6,6>,<8,8>> ;8-F LEFT
	OPTGEN <<1,1>,<2,2>,<4,4>,<6,6>,<2,4>,<4,6>,<2,2>,<4,4>> ;0-7 RIGHT
	OPTGEN <<8,8>,<6,8>,<0A,0C>,<0E,10>,<2,2>,<6,6>,<0C,0C>,<8,8>> ;8-F RIGHT
	.PAGE
	.SBTTL UTILITIES
	.CSECT MAIN
ERASE:	LDX I,ZHI-1
1$:	CLR <<ZX,0>>			;PAGE 0 ERASE
	DEX
	CPX I,ZLO
	BCS 1$
	LDY I,3F			;64 BYTES PLAYFIELD ERASE
	WAIT
	LDA I,0
3$:	STA AY,PLYFLD
	DEY
	BPL 3$
	LDY I,3F
	WAIT				;WAIT A FRAME
2$:	STA AY,PLYFLD+40		;OTHER 64 BYTES
	DEY
	BPL 2$
	LDA A,POTS
	AND I,30			;GET LANGUAGE OPTION
	LSRS 2				;PREPARE TO MULTIPLY BY 6
	STA R0				;SAVE OPT*4
	LSR
	ADC R0				;COMPUTE OPT*4+OPT*2
	ADC I,MEST0&0FF			;INDEX THRU MESSAGE TABLE
	STA LNG2			;STORE COMPUTED  ADDRESS
	LDA I,MEST0&-100/100
	ADC I,0
	STA LNG2+1			;LNG2 NOW POINTS TO CORRECT LANGUAGE
	MVI LNG1,MESS0
	LDA I,0
	RTS

	.ASECT
INTZRO:	MVI MAPNDX,TRGTS		;RESET TARGET TABLE ADDRESS
	MOVB ABSVEL,<I,80>			;INITIALIZE VELOCITY
	MOVB SIGHTC+1,<I,C.ACT+P.CURSOR>	;INITIALIZE CURSOR PIX
	MOVB SIGHTX+1,<I,RWALL-LWALL/2+LWALL+8>	;CURSOR X
	MOVB SIGHTY+1,<I,FLOOR>
	RTS

	.CSECT MAIN
PUTMSG: WAIT				;SYNC TO VBLANK
DIAM:	LDA NY,LNG2			;GET SECONDARY INDEX
	TAY				;PUT IT WHERE IT CAN BE USED
DIASPC:	LDA NY,LNG1			;GET MESSAGE DATA
	BEQ PMSGE			;DONE
	BPL 2$				;ASCII DATA
	AND I,7F			;ITS AN INDEX. MASK FLAG
	TAX				;AND PUT IT WHERE IT CAN BE USED
4$:	INY				;NEXT DATA ADDRESS
	BNE DIASPC			;(ALWAYS)
2$:	STA AX,PLYFLD			;PUT THE DATA ON TV
	INX				;NEXT CELL
	BNE 4$				;(ALWAYS)
PMSGE:	RTS				;END
DIAT:	LDA NY,LNG2			;GET SECONDARY INDEX
	TAY				;PUT IT WHERE IT CAN BE USED
DIATPC:	LDA NY,LNG1			;GET MESSAGE DATA
	BEQ PMSGE			;DONE
	BPL 2$				;ASCII DATA
	AND I,7F			;ITS AN INDEX MASK FLAG
	TAX				;AND PUT IT WHERE IT CAN BE USED
4$:	INY				;NEXT DATA ADDRESS
	BNE DIATPC			;(ALWAYS)
2$:	LDA I,0				;WRITE A BLANK
	STA AX,PLYFLD
	INX
	BNE 4$				;(ALWAYS)

	.ASECT
	.PAGE
	.SBTTL MULTIPLY
;	
;ACC =>MULTIPLIER
;X   =>ADDRESS OF PRODUCT
;Y   =>ADDRESS OF MULTIPLICAND
;
MULT:	STA R8				;SAVE NULTIPLIER
	CLR <<ZX,0>,<ZX,1>>		;CLEAR PRODUCT
	MOV R6,<AY,0>			;COPY MULTIPLICAND INTO R6
4$:	ASL R8
	BCS 1$				;LOOP UNTIL CARRY CLEAR
	BNE 2$				;ANY MULTIPLIER =0
	RTS				;THEN EXIT
1$:	ADDM <ZX,0>,R6
	CLC
2$:	LDA R7
	BPL 3$
	SEC
3$:	ROR R7				;HAVE MULTIPLICAND
	ROR R6
	JMP 4$
	.PAGE
	.SBTTL INTERRUPT HANDLER
	.CSECT MAIN
INTRPT:	PHA				;SAVE ACCUMULATOR
	PHX				;SAVE X
	PHY				;SAVE Y
	LDA SOUND
	EOR I,SNDPOL
	STA A,SNDOUT
	RES SOUND,SND.EX!SND.MS		;CLEAR EXPLOSION AND MISSLE SOUND
	LDA SLWREG+1
	STA A,SLEW
	BIT SYNC			;SYNC ENABLE ON?
	BVC VBEND			;NO
	LDX I,0F
1$:	LDA ZX,SIGHTX
	STA AX,HVLD			;OBJECT HORIZ
	LDA ZX,SIGHTY
	DEX
	STA AX,HVLD			;OBJECT VERT
	LDA ZX,SIGHTC+1
	EOR I,0F			;INVERT THE PIX BITS
	STA AX,PIXLD			;OBJECT PIX
	ROLS 2
	STA AX,PIXLD+1			;ACTIVATE OBJECT
	DEX
	BPL 1$				;8 OBJECTS
	LDA I,CS.DGN
	BIT SYNC			;DIAGNOSTIC?
	BNE VBEND			;YEP. EXIT
	LDA BLINK			;BLINK TIME?
	AND I,0F
	BNE 2$				;NO
	INC MSLTME			;CLICK EVERY 16 FRAMES
	LDA I,CS.EP
	LDY I,GMEOVR
	BIT SYNC			;EXTENDED PLAY?
	BMI 3$				;ATTRACT MODE. BLINK ANYWAY
	BEQ 2$				;NOPE
	LDY I,BNSPLY
3$:	LDA I,10			;BLINK ON OR OFF?
	BIT BLINK
	BNE 7$				;ON
	JSR DIAT			;OFF. GO ERASE IT
	BEQ 2$				;(ALWAYS)
7$:	JSR DIAM			;ON. GO WRITE IT
2$:	LDA BLINK			;TIME TO BLINK
	AND I,3
	BNE UNPK			;NO. GO UNPACK SCORES
	LDX I,13.			;(7 OBJECTS)
9$:	LDA ZX,MISCTL			;OBJECT EXPLODING?
	AND I,C.EXP
	BEQ 5$				;NO
	LDA ZX,MISCTL			;YES. FLIP THE COLOR
	EOR I,8
	STA ZX,MISCTL
5$:	DEXS 2
	BPL 9$
VBEND:	INC BLINK
	INC HSRTIM
	INC FRMC
	BNE 1$
	INC FRMC+1
	LDA I,O.EP			;EXTENDED PLAY ALLOWED?
	BIT A,OPTION			;NOPE
	BNE 1$
	LDA I,0FF
	EOR BNUS1
	STA BNUS1
1$:	SET SYNC,CS.SPR			;INDICATE SYNC PROCESSED
	BIT LOCK+1			;COIN LOCK?
	BPL 3$				;NO
	DEC LOCK			;YEP. TIME IT OUT
	BNE 3$
	CLR LOCK+1			;DONE.
3$:	LDX I,20.			;WAIT 100 USECS
2$:	DEX
	BPL 2$
	PLY
	PLX
	PLA
	RTI
UNPK:	DNOP			;UNPACK SCORES AND TIME
	LDX I,SCORE
	LDY I,63		;DESTINATION OF PLAYER SCORE
	BIT SYNC			;ODD, BUT DO HI-SCORE ONLY IF ATTRACT MODE.
	BPL 11$			;ELSE JUST DO PLAYER SCORE.
	LSR				;EVEN FRAME?
	BEQ 1$
	BCC 11$				;YES. UNPACK PLAYER
	LDX I,BNUS
	BIT BNUS1
	BMI 3$
	LDX I,HISCOR
3$:	LDY I,7B			;DESTINATION OF HIGH SCORE
11$:	LDA I,'0			;PAD WITH '0' ON RIGHT
	STA AY,PLYFLD+2
12$:	CVTA				;CONVERT TO ASCII
	INX				;NEXT DATA BYTE
	DEYS 2				;NEW PLAYFIELD ADDRESS
	TXA				;2 BYTE ROLLOVER?
	LSR
	BCS 12$			;NO.
	BIT SYNC			;ATTRACT MODE?
	BMI VBEND			;YES.
	LDX I,SECNDS
	LDY I,7A
	CVTA				;CONVERT TO ASCII
	BNE VBEND			;EXIT
1$:	LDY I,BNSFOR
	BIT BNUS1
	BMI 2$
	LDY I,HISC
2$:	JSR DIAM
	BEQ VBEND
	.ASECT
	.PAGE
	.SBTTL MESSAGES
	.NLIST BEX
SCORM	=0
HISC	=1
MT	=2
GMEOVR	=3
BNSPLY	=4
BNSFOR	=5
DIAGNM	=0

	.MACRO MST OP
	.IRP X,<OP>
	.BYTE X-MESS0
	.ENDR
	.ENDM

MEST0:	MST <ESCR,EHISCR,ETME,EGO,EBPL,EBF>	;ENGLISH
	MST <FSCR,FHISCR,FTME,FGO,FBPL,FBF>	;FRENCH
	MST <GSCR,GHISCR,GTME,GGO,GBPL,GBF>	;GERMAN
	MST <SSCR,SHISCR,STME,SGO,SBPL,SBF>	;SPANISH
DIAM1:	.BYTE GT0-DGNM,GT1-DGNM,GT2-DGNM,GT3-DGNM
MESS0:
SSCR:
FSCR:
ESCR:	.ASCIZ <0C1>/SCORE/
STME:
GTME:
FTME:
ETME:	.ASCIZ <0D9>/TIME/
EHISCR:	.ASCIZ <0D7>/ HI@SCORE/
EGO:	.ASCIZ <9A>/GAME/<0BA>/OVER/
EBPL:	.ASCIZ <9A>/BONUS/<0BA>/PLAY/
FBF:
GBF:
SBF:
EBF:	.ASCIZ <0D2>/     BONUS@FOR/
SHISCR:	.ASCIZ <0D4>/PUNTAJE@ALTO/
SGO:	.ASCIZ <9A>/FIN/<0B8>/PARTIDA/
SBPL:	.ASCIZ <9A>/JUGADA/<0BA>/EXTRA/
FHISCR:	.ASCIZ <0D2>/MEILLEUR@SCORE/
FGO:	.ASCIZ <9A>/FIN@DE/<0BA>/PARTIE/
FBPL:	.ASCIZ <9A>/JEU/<0B8>/PROLONGE/
GSCR:	.ASCIZ <0C0>/TREFFER/
GHISCR:	.ASCIZ <0D5>/TOP@TREFFER/
GGO:	.ASCIZ <97>/SPIELENDE/
GBPL:	.ASCIZ <0A5>/VERLAENGERTE@SPIELZEIT/
	.BYTE 0		;INDEX TO DIAGNOSTIC STUFF
DGNM:	.ASCII <0C0>/H/<0E0>/V/<0DA>/COIN/<98>/COUNT/
	.ASCIZ <0F8>/TIME/
GT0:	.ASCIZ <0FD>/@60/
GT1:	.ASCIZ <0FD>/@80/
GT2:	.ASCIZ <0FD>/100/
GT3:	.ASCIZ <0FD>/120/
BPM:	.ASCIZ <80>/BNS  /
	.PAGE
	.SBTTL TARGET TABLES
BCDSCR:	.BYTE 0,0,0,35,45,45,80,45	;TARGET POINT VALUES IN BCD

	.MACRO TVL DATA
	.IRP X,<DATA>
	.BYTE C.ACT+C.EXP+X
	.ENDR
	.ENDM
	
TGTVLU:	TVL <0,1,2,0,1,1,2,1>		;TARGET EXPLOSION PICTURES

	.MACRO TARGET SLEW,PIC,POS
	.BYTE SLEW,PIC+C.ACT,POS
	.ENDM

TOWER	=3
OIL	=4
BRIDGE	=5
JET	=6+C.SPC			;SPECIAL MO.
CITY	=7


TRGTS:	TARGET 17,OIL,8F
	TARGET 38,TOWER,5
	TARGET 59,CITY,8D
	TARGET 7A,BRIDGE,0C
	TARGET 0AE,BRIDGE,58
	TARGET 0D1,OIL,44
	TARGET 21,JET,0C0
	TARGET 33,OIL,09
	TARGET 5E,BRIDGE,14
	TARGET 0A8,JET+C.DIR,0
	TARGET 0C9,TOWER,6B
	TARGET 0E9,CITY,0
	TARGET 17,OIL,8F
	TARGET 60,JET+C.DIR,0
	TARGET 66,BRIDGE,2E
	TARGET 97,OIL,8F
	TARGET 0D9,CITY,70
	TARGET 0FA,BRIDGE,0C
	TARGET 1A,OIL,60
	TARGET 3A,TOWER,50
	TARGET 5A,BRIDGE,0A
	TARGET 0AA,CITY,0B2
	TARGET 0C2,OIL,0B0
	TARGET 0E2,BRIDGE,1A
	TARGET 26,CITY,70
	TARGET 3A,TOWER,50
	TARGET 66,BRIDGE,2E
	TARGET 92,CITY,70
	TARGET 0AA,OIL,0B6
	TARGET 0EE,OIL,74
	TARGET 06,CITY,8C
	TARGET 4A,TOWER,55
	TARGET 9A,JET,0C0
	TARGET 0B0,BRIDGE,6E
	TARGET 0EE,OIL,74
	TARGET 0E,CITY,60
	TARGET 26,CITY,70
	TARGET 3A,TOWER,50
	TARGET 66,TOWER,8C
	TARGET 9E,BRIDGE,0
	TARGET 0B8,CITY,5A
	TARGET 0CE,CITY,45
	TARGET 0FE,OIL,50
	TARGET 1A,TOWER,50
	TARGET 3A,CITY,50
	TARGET 7A,BRIDGE,0C
	TARGET 9E,BRIDGE,0
	TARGET 0EE,JET+C.DIR,0
	TARGET 06,CITY,8C
	TARGET 1E,OIL,70
	TARGET 56,TOWER,50
	TARGET 7A,BRIDGE,0C
	TARGET 0BE,CITY,0B6
	TARGET 0FE,OIL,50
	TARGET 0E,CITY,60
	TARGET 33,OIL,09
	TARGET 66,BRIDGE,2E
	TARGET 7E,CITY,60
	TARGET 0BE,CITY,0B6
	TARGET 0FA,BRIDGE,0C
	TARGET 26,CITY,70
	TARGET 66,TOWER,70
	TARGET 0B6,JET,0C0
	TARGET 0CE,CITY,45
	TARGET 0EE,OIL,74
	.BYTE 0				;TERMINATOR
	
	.IF GE,7800-.
	.REPT 7A00-.		;FILL
	.BYTE 0
	.ENDR
	.ENDC
CHK3:	.WORD 0
	.IIF NE,R137,ID3:	.BYTE 'P,'L
	.IIF NE,R185,ID3:	.BYTE 'P,'L
	.IIF NE,R8316,ID3:	.BYTE 'D,'D
	.IIF EQ,R137+R185+R8316,ID3:	.BYTE 'A,'B
	.IIF NE,.&1,.BYTE 0	;PAD ASECT EVEN
$ABS=.
	.CSECT ONE
	.IIF NE,.-$CSTO&1,.BYTE 0	;PAD EVEN
	$ONE=.-$CSTO
	.CSECT MAIN
	.IIF NE,.-$CST&1,.BYTE 0	;PAD EVEN
	$MAIN=.-$CST
	.CSECT TEST
	.IIF NE,.-$CTST&1,.BYTE 0	;PAD EVEN
$TEST=.-$CTST
	.CSECT FILL
$ABS=7FF8-$TEST-$ABS-$ONE-$MAIN
	.IF LT,$ABS
	.ERROR $ABS		;CSECTS TOO BIG
	.IFF
	.REPT $ABS
	.BYTE 0
	.ENDR
	.ENDC
	.GLOBL VCTRS,$CST,$CSTO,CHK1,CHK2,CHK3,CHK4
	.CSECT TEST
CHK4:	.WORD 0
	.IIF NE,R137,ID4:	.BYTE 2E,'J
	.IIF NE,R185,ID4:	.BYTE 'P,'L
	.IIF NE,R8316,ID4:	.BYTE 'D,'D
	.IIF EQ,R137+R185+R8316,ID4:	.BYTE 'A,'B
VCTRS:	.WORD RESET,INTRPT	;VECTORS
	.END RESET
                                                                                                                                                                                                                                 